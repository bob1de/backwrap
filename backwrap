#!/bin/bash


# return status codes
USAGE_RC=-127
LOCKED_RC=-126
MULTIPLE_FAILED_RC=-125


# helper functions
errcho() { echo $@ 1>&2; }

usage() {
  cat 1>&2 << EOF
Usage: [CONFIG=backup.cfg] $(basename "$0") <ACTION>

ACTION:
  The "backup" action will run the backup right away.

  The "backup-job" action is meant to be used from inside a crontab and
  will run a backup not more often than configured in JOB_INTERVAL_* in
  your configuration file.

  The "init" action will initialize an empty repository with the backup
  tool you configured. It fetches all required settings such as the
  repository's URL and passphrase from the configuration file and hence
  needs no further parameters.

  The "gen-crontab" action will print a line suitable to be added to a
  file in /etc/cron.d and exit. Use like so:

    CONFIG=/etc/backwrap.d "$0" > /etc/cron.d/backwrap

  The generated entry may also be added to a user-specific crontab
  file, in which case you simply need to remove the username field.

CONFIGURATION FILE:
  Pass the configuration file in the CONFIG variable.
  If you specify a directory for CONFIG, each file inside that directory
  and any of it's subdirectories ending in .cfg will be processed in
  sequence. The default config file is "backup.cfg" in the current
  working directory.

EXIT CODE
  backwrap indicates the result of its task by exiting with one of the
  following status codes:
        0: Success
     -127: Faulty configuration or parameters.
     -126: The configuration is still locked, hence the backup action
           didn't run.
     -125: Backwrap ran on a configuration directory and one or more of
           the configuration files in it failed to run.
    other: The result of the last failed child process such as restic
           or btrfs.

EOF
  exit $USAGE_RC
}

# run backup tool with particular environment

run_borg() {
  export BORG_REPO
  export BORG_PASSPHRASE="$(cat "$passphrase_file" /dev/null)"
  borg "$@"
  return $?
}

run_restic() {
  export RESTIC_REPOSITORY="$RESTIC_REPO"
  export RESTIC_PASSWORD_FILE="$passphrase_file"
  restic "$@"
  return $?
}


# check for existence of config file
[ -n "$CONFIG" ] || CONFIG="backup.cfg"
CONFIG="$(realpath "$CONFIG")"
if [ ! -e "$CONFIG" ]; then
  errcho "ERROR: config file '$CONFIG' doesn't exist"
  usage
fi


# check if all required commands are available
hash cut && hash flock && hash md5sum && hash sed
if [ "$?" -ne 0 ]; then
  errcho "ERROR: Backwrap needs the cut, flock, md5sum and sed commands."
  exit $USAGE_RC
fi


# handle gen-crontab action without reading config file to prevent
# walking into directories
action="$1"
if [ "$action" == "gen-crontab" ]; then
  script="$(realpath "$0")"
  echo "*/15 * * * *    $USER    [ -x \"$script\" ] && CONFIG=\"$CONFIG\" \"$script\" backup-job > /dev/null"
  exit 0
fi


# handle config directories
if [ -d "$CONFIG" ]; then
  rc=0
  cfgfiles=`find "$CONFIG" -type f -name \*.cfg`
  exec {fd}<<<`find "$CONFIG" -type f -name \*.cfg`
  while read -u $fd cfgfile; do
    [ -z "$cfgfile" ] && continue
    cfgname="$(basename "$cfgfile")"
    echo "Running for $cfgfile ..."
    CONFIG="$cfgfile" "$0" "$@" | sed "s/^/[$cfgname]  /"
    [ "${PIPESTATUS[0]}" -ne 0 ] && rc=$MULTIPLE_FAILED_RC
  done
  exit $rc
fi


# switch to config file's location and read the file
#cd "$(dirname "$CONFIG")"
. "$CONFIG"


# validate BACKUP_TOOL setting
case "$BACKUP_TOOL" in
  "borg" | "restic")
    ;;
  *)
    errcho "ERROR: Set BACKUP_TOOL in your configuration."
    exit $USAGE_RC
    ;;
esac


# rewrite some config variables
[ -z "$BTRFS_SNAPDIR" ] && BTRFS_SNAPDIR=".snap"
[ -z "$BTRFS_KEEP_SNAPSHOTS" ] && BTRFS_KEEP_SNAPSHOTS=0

# build paths for later use
exclude_file="$(realpath "$CONFIG.exclude")"
passphrase_file="$(realpath "$CONFIG.passphrase")"

# generate an unique hash from the location of the config file to build
# paths for temporary files.
read cfgsum <<< "$(md5sum <<< "$CONFIG" | cut -c-16)"
pidfile="$(realpath "/tmp/backwrap.$cfgsum.pid")"
mountdir="$(realpath "/tmp/backwrap.$cfgsum.mnt")"
btrfs_snapname=".backwrap.$cfgsum.snap"

if [ -e "$passphrase_file" ] && [ "$(stat -c %a "$passphrase_file")" -gt 660 ]; then
  errcho "WARNING: $passphrase_file is world-readable, doing chmod 660."
  chmod 660 "$passphrase_file"
fi

if [ -e "$exclude_file" ]; then
  case "$BACKUP_TOOL" in
    "borg")
      BORG_CREATE_OPTS+=" --exclude-from $exclude_file"
      ;;
    "restic")
      RESTIC_BACKUP_OPTS+=" --exclude-file $exclude_file"
      ;;
  esac
fi


# parse action
case "$action" in
  "backup")
    ;;
  "backup-job")
    [ -n "${JOB_INTERVAL##*[!0-9]*}" ] && i=$JOB_INTERVAL || i=0
    [ -n "${JOB_INTERVAL_MINUTES##*[!0-9]*}" ] && i=$(($i + 60 * $JOB_INTERVAL_MINUTES))
    [ -n "${JOB_INTERVAL_HOURS##*[!0-9]*}" ] && i=$(($i + 3600 * $JOB_INTERVAL_HOURS))
    [ -n "${JOB_INTERVAL_DAYS##*[!0-9]*}" ] && i=$(($i + 86400 * $JOB_INTERVAL_DAYS))
    if [ $i -eq 0 ]; then
      errcho "ERROR: JOB_INTERVAL_* not configured."
      exit $USAGE_RC
    fi
    # subtract 10 seconds to avoid race condition with cron
    JOB_INTERVAL=$(($i - 10))
    now="$(date +%s)"
    tsfile="$CONFIG.last_job"
    if [ -e "$tsfile" ]; then
      modinterval=$(("$now" - "$(cat "$tsfile")"))
      if [ "$modinterval" -lt "$JOB_INTERVAL" ]; then
        echo "No backup needed according to the configured interval."
        exit 0
      fi
    fi
    ;;
  "init")
    case "$BACKUP_TOOL" in
      "borg")
        run_borg init $BORG_INIT_OPTS
        rc=$?
        ;;
      "restic")
        run_restic init $RESTIC_INIT_OPTS
        rc=$?
        ;;
    esac
    exit $rc
    ;;
  *)
    usage
    ;;
esac


# create lock for this config
exec {fd}>>"$pidfile"
flock -n "$fd"
if [ "$?" != "0" ]; then
  if [ "$action" == "backup-job" ]; then
    echo "$pidfile is still locked, not running backup job."
    exit 0
  else
    errcho "ERROR: '$pidfile' is still locked, is there another job running?"
    exit $LOCKED_RC
  fi
fi
pid=$$
echo $pid > "$pidfile"


# create and mount snapshots of btrfs subvolumes
mkdir -p "$mountdir" && chmod 700 "$mountdir" && cd "$mountdir"
rc=$? && [ "$rc" -eq 0 ] || exit $rc

snapdirs=()
mountnames=()
for src in "${BTRFS_SOURCES[@]}"; do
  if [ -z "$src" ] || [ ! -d "$src" ]; then
    errcho "ERROR: Btrfs subvolume at '$src' doesn't exist, skipping."
    continue
  fi

  snapdir="$(realpath "$src/$BTRFS_SNAPDIR")"
  mkdir -p "$snapdir"
  rc=$?
  if [ "$rc" -ne 0 ]; then
    errcho "ERROR: Can't create snapshot directory '$snapdir'."
    exit $rc
  fi
  snapdirs+=("$snapdir")

  snapname="$(date '+%Y-%m-%d_%H-%M-%S')"
  snaploc="$(realpath "$snapdir/$snapname")"

  mountname="$(basename "$src")"
  if [ "$mountname" == "/" ]; then
    mountname=root
  fi

  if [ -d "$snaploc" ]; then
    btrfs subvolume delete "$snaploc"
    rc=$? && [ "$rc" -eq 0 ] || exit $rc
  fi

  btrfs subvolume snapshot -r "$src" "$snaploc" && \
  mkdir -p "$mountname" && \
  mount --bind "$snaploc" "$mountname" && \
  mountnames+=("$mountname")
  rc=$? && [ "$rc" -eq 0 ] || exit $rc
done


# create backup
paths=()
paths+=("${SOURCES[@]}")
paths+=("${mountnames[@]}")

if [ ${#paths[@]} -gt 0 ]; then
  archname="$(date +%Y-%m-%d_%H:%M:%S)"

  case "$BACKUP_TOOL" in
    "borg")
      run_borg create $BORG_CREATE_OPTS "::$archname" "${paths[@]}"
      rc=$?
      ;;
    "restic")
      run_restic backup $RESTIC_BACKUP_OPTS --tag "$archname" "${paths[@]}"
      rc=$?
      ;;
  esac
fi


# unmount btrfs snapshots
for mountname in "${mountnames[@]}"; do
  umount -f "$mountname" && [ -z "$(ls -A "$mountname")" ] && rm -rf "$mountname"
done
cd ..
[ -z "$(ls -A "$mountdir")" ] && rm -rf "$mountdir"

# delete btrfs snapshots according to retention policy
keep=$(("$BTRFS_KEEP_SNAPSHOTS" + 1))
for snapdir in "${snapdirs[@]}"; do
  ls -tp "$snapdir" | grep "/$" | tail -n +$keep | xargs -I {} btrfs subvolume delete -- "$snapdir/{}"
done


if [ "$rc" -ne 0 ]; then
  errcho "ERROR: Backup failed!"
else
  # update timestamp
  [ "$action" == "backup-job" ] && echo "$now" > "$tsfile"

  # prune old backups
  case "$BACKUP_TOOL" in
    "borg")
      if [ -n "$BORG_PRUNE_OPTS" ]; then
        run_borg prune $BORG_PRUNE_OPTS ::
        rc=$?
      fi
      ;;
    "restic")
      if [ -n "$RESTIC_FORGET_OPTS" ]; then
        run_restic forget $RESTIC_FORGET_OPTS
        rc=$?
      fi
      ;;
  esac
fi


# clean up
rm -f "$pidfile"


exit $rc
